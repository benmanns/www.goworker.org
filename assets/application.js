// Generated by CoffeeScript 1.6.3
(function() {
  var tooltip;

  tooltip = function(x, y, contents) {
    return $("<div></div>").attr("id", "tooltip").addClass("chart-tooltip").html(contents).css({
      top: y + 5,
      left: x + 5
    }).appendTo("body").fadeIn(100);
  };

  $(function() {
    $.get("/assets/benchmarks.json", function(benchmarks, textStatus, jqXHR) {
      $.fn.extend({
        graphBenchmark: function() {
          return this.each(function() {
            var $this, data, dataset, previousPoint;
            $this = $(this);
            dataset = $this.data("dataset");
            data = benchmarks[dataset];
            if (typeof data === "undefined") {
              return;
            }
            $this.plot(benchmarks[dataset], {
              series: {
                lines: {
                  show: true
                },
                points: {
                  show: true
                }
              },
              grid: {
                hoverable: true,
                clickable: true,
                backgroundColor: "#f5f5f5"
              }
            });
            previousPoint = null;
            return $this.on("plothover", function(e, pos, item) {
              var c, x, y, _ref;
              if (item) {
                if (previousPoint !== item.dataIndex) {
                  $(".chart-tooltip").fadeOut(100, function() {
                    return $(this).remove();
                  });
                  previousPoint = item.dataIndex;
                  _ref = (function() {
                    var _i, _len, _ref, _results;
                    _ref = item.datapoint;
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                      c = _ref[_i];
                      _results.push(c.toFixed(2));
                    }
                    return _results;
                  })(), x = _ref[0], y = _ref[1];
                  return tooltip(item.pageX, item.pageY, "" + item.series.label + ": " + (Math.round(x)) + " jobs in " + y + " seconds");
                }
              } else {
                $(".chart-tooltip").fadeOut(100, function() {
                  return $(this).remove();
                });
                return previousPoint = null;
              }
            });
          });
        }
      });
      $(".tab-pane.active .placeholder").graphBenchmark();
      return $(".computation").each(function(index, value) {
        var $this, a, aLast, aTime, b, bLast, bTime, benchmark, data, entry;
        $this = $(this);
        data = $this.data();
        benchmark = benchmarks[data.dataset];
        if (typeof benchmark === "undefined") {
          return;
        }
        a = ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = benchmark.length; _i < _len; _i++) {
            entry = benchmark[_i];
            if (entry.label === data.a) {
              _results.push(entry);
            }
          }
          return _results;
        })())[0].data;
        b = ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = benchmark.length; _i < _len; _i++) {
            entry = benchmark[_i];
            if (entry.label === data.b) {
              _results.push(entry);
            }
          }
          return _results;
        })())[0].data;
        aLast = a[a.length - 1];
        bLast = b[b.length - 1];
        aTime = aLast[1];
        bTime = bLast[1];
        if (bTime > 1.5 * aTime) {
          return $this.text("" + (Math.round(bTime / aTime)) + "x");
        } else if (bTime > aTime) {
          return $this.text("" + (Math.round((bTime * 100) / aTime) - 100) + "%");
        } else {
          return $this.text("not");
        }
      });
    });
    $.fn.extend({
      showTab: function() {
        return this.each(function() {
          var $placeholders, $this, selector;
          $this = $(this);
          $this.tab("show");
          selector = $this.data("target");
          $(".chart-tooltip").fadeOut(100);
          $placeholders = $(selector).find(".placeholder");
          if ($placeholders.graphBenchmark) {
            return $placeholders.graphBenchmark();
          }
        });
      }
    });
    $("#benchmark-tabs a").on("click", function(e) {
      e.preventDefault();
      return $(this).showTab();
    });
    $("#sleep-footnote").on("click", function(e) {
      return $("a[data-target=#sleep]").showTab();
    });
    $(window).resize(function() {
      var $placeholders;
      $placeholders = $(".tab-pane.active .placeholder");
      if ($placeholders.graphBenchmark) {
        return $placeholders.graphBenchmark();
      }
    });
    if (window.location.hash === '#subscribed') {
      window.location.hash = '';
      return $('#subscription-modal').modal();
    }
  });

}).call(this);
